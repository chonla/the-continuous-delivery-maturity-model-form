require "test_helper"

class CdmmHelperTest < ActionView::TestCase
    test "get existing first row and first column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, 0)
        assert_equal [ "1_1_1", "1_1_2", "1_1_3" ], cell_values
    end

    test "get existing first row and some column in the middle data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, 2)
        assert_equal [ "1_3_1", "1_3_2", "1_3_3" ], cell_values
    end

    test "get existing first row and last column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, 3)
        assert_equal [ "1_4_1", "1_4_2", "1_4_3" ], cell_values
    end

    test "get existing first column and some row in the middle data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 2, 0)
        assert_equal [ "3_1_1", "3_1_2", "3_1_3" ], cell_values
    end

    test "get existing last column and some row in the middle data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 2, 3)
        assert_equal [ "3_4_1", "3_4_2", "3_4_3" ], cell_values
    end

    test "get existing last row and first column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 3, 0)
        assert_equal [ "4_1_1", "4_1_2", "4_1_3" ], cell_values
    end

    test "get existing last row and some column in the middle data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 3, 2)
        assert_equal [ "4_3_1", "4_3_2", "4_3_3" ], cell_values
    end

    test "get existing last row and last column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 3, 3)
        assert_equal [ "4_4_1", "4_4_2", "4_4_3" ], cell_values
    end

    test "get out-of-lower row and column bound data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, -1, -1)
        assert_equal [ ], cell_values
    end

    test "get out-of-lower row bound and some column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, -1, 0)
        assert_equal [ ], cell_values
    end

    test "get out-of-upper row bound and some column data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 4, 0)
        assert_equal [ ], cell_values
    end

    test "get some row and out-of-lower column bound data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, -1)
        assert_equal [ ], cell_values
    end

    test "get some row and out-of-upper column bound data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, 4)
        assert_equal [ ], cell_values
    end

    test "get out-of-upper row and column bound data in table" do
        table = {
            :rows => [
                [ [ "1_1_1", "1_1_2", "1_1_3" ], [ "1_2_1", "1_2_2", "1_2_3" ], [ "1_3_1", "1_3_2", "1_3_3" ], [ "1_4_1", "1_4_2", "1_4_3" ] ],
                [ [ "2_1_1", "2_1_2", "2_1_3" ], [ "2_2_1", "2_2_2", "2_2_3" ], [ "2_3_1", "2_3_2", "2_3_3" ], [ "2_4_1", "2_4_2", "2_4_3" ] ],
                [ [ "3_1_1", "3_1_2", "3_1_3" ], [ "3_2_1", "3_2_2", "3_2_3" ], [ "3_3_1", "3_3_2", "3_3_3" ], [ "3_4_1", "3_4_2", "3_4_3" ] ],
                [ [ "4_1_1", "4_1_2", "4_1_3" ], [ "4_2_1", "4_2_2", "4_2_3" ], [ "4_3_1", "4_3_2", "4_3_3" ], [ "4_4_1", "4_4_2", "4_4_3" ] ]
            ]
        }
        cell_values = get_data_at(table, 0, 4)
        assert_equal [ ], cell_values
    end

    test "generate cell key" do
        table = {}
        result_key = cell_key(table, 0, 2)
        assert_equal "cell_0_2", result_key
    end

    test "check if all input in cell are checked? -- all checked" do
        table = {
            :rows => [
                [ [ { :value => "checked" }, { :value => "checked" }, { :value => "checked" } ] ]
            ]
        }

        result = all_checked?(table, 0, 0)
        assert_equal true, result
    end

    test "check if all input in cell are checked? -- partially checked" do
        table = {
            :rows => [
                [ [ { :value => "unchecked" }, { :value => "checked" }, { :value => "checked" } ] ]
            ]
        }

        result = all_checked?(table, 0, 0)
        assert_equal false, result
    end

    test "check if all input in cell are checked? -- none is checked" do
        table = {
            :rows => [
                [ [ { :value => "unchecked" }, { :value => "unchecked" }, { :value => "unchecked" } ] ]
            ]
        }

        result = all_checked?(table, 0, 0)
        assert_equal false, result
    end

    test "check if all input in cell are checked? -- all applicable are checked" do
        table = {
            :rows => [
                [ [ { :value => "check" }, { :value => "inapplicable" }, { :value => "checked" } ] ]
            ]
        }

        result = all_checked?(table, 0, 0)
        assert_equal true, result
    end

    test "check if all input in cell are checked? -- not all applicable are checked" do
        table = {
            :rows => [
                [ [ { :value => "check" }, { :value => "inapplicable" }, { :value => "unchecked" } ] ]
            ]
        }

        result = all_checked?(table, 0, 0)
        assert_equal false, result
    end

    test "converting label to key" do
        result = label_to_key("http://google.com?q=This is a book.")

        assert_equal "http_google_com_q_this_is_a_book", result
    end
    #   test "the truth" do
#     assert true
#   end
end
